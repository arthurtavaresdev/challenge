<?php


namespace Tests\Feature;


use App\Account;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;
use App\User;

class AccountsTest extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        factory(Account::class,3)->create();
        $this->faker->addProvider(new \Faker\Provider\pt_BR\Payment($this->faker));
        $this->faker->addProvider(new \Faker\Provider\pt_BR\Company($this->faker));
    }

    /**
     * A basic test example.
     *
     * @return void
     */
    public function test_retry_all_accounts()
    {
        $response = $this->get('/api/accounts');
        $response->assertStatus(200);
    }


    public function test_insert_new_accounts_personal()
    {
        $payload = [
            "type" => "Personal",
            'agency' => $this->faker->randomNumber(4),
            'number' => $this->faker->bankAccountNumber,
            'digit' => $this->faker->randomDigit
        ];

        $response = $this->post('/api/accounts', $payload);
        $response->assertStatus(201);
    }

    public function test_insert_new_accounts_company()
    {
        $payload = [
            "type" => "Company",
            'agency' => $this->faker->randomNumber(4),
            'number' => $this->faker->bankAccountNumber,
            'digit' => $this->faker->randomDigit,
            'cnpj' => $this->faker->cnpj,
            "social_name" => $this->faker->company,
	        "corporate_name" => $this->faker->company,
        ];

        $response = $this->post('/api/accounts', $payload);
        $response->assertStatus(201);
    }

    public function test_insert_new_accounts_company_with_not_exists_cnpj()
    {
        $payload = [
            "type" => "Company",
            'agency' => $this->faker->randomNumber(4),
            'number' => $this->faker->bankAccountNumber,
            'digit' => $this->faker->randomDigit,
            "social_name" => $this->faker->company,
            "corporate_name" => $this->faker->company,
        ];

        $response = $this->post('/api/accounts', $payload);
        $response->assertStatus(422);
    }

    /**
     * @throws \Throwable
     */
    public function test_update_accounts()
    {
        $account = factory(Account::class)->create();
        $agency = $account->agency;
        $response = $this->put('/api/accounts/' . $account->id,[
            'agency' => $this->faker->randomNumber(4)
        ]);
        $response->assertStatus(200);
        $this->assertDatabaseMissing('accounts', ['agency' => $agency]);

        $this->assertNotEquals($agency, $response->decodeResponseJson()['agency']);
    }

    public function test_show_account(){
        $account = factory(Account::class)->create();
        $response = $this->get('/api/accounts/' . $account->id);
        $response->assertStatus(200);
    }

    /**
     * @throws \Throwable
     */
    public function test_delete_accounts()
    {
        $account = factory(Account::class)->create();
        $id =  $account->id;
        $response = $this->delete('/api/accounts/' . $id);
        $response->assertStatus(201);
    }


    /**
     * @throws \Throwable
     */
    public function test_delete_accounts_expected_error()
    {
        $response = $this->delete('/api/accounts/' . 0);
        $response->assertStatus(400);
    }

}
